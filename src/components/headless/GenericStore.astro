---
import { addStore } from "./StoreManager";


const storeId = crypto.randomUUID();
const storeSlug = Astro.props.storeSlug;
const actualStore = Astro.props.storeFactory(Astro.props);
const initialState = actualStore.init ? await actualStore?.init() : {};
addStore(storeId, actualStore);

---

<script is:inline define:vars={{
    storeId,
    storeSlug,
    initialState,
}}>
    console.log("GenericStore", storeId, storeSlug);
    globalThis.StoreManager = globalThis.StoreManager ?? {};
    console.log("globalThis.StoreManager", globalThis.StoreManager);

    if (typeof globalThis.StoreManager.withStoreFactory === "function") {
        globalThis.StoreManager.withStoreFactory(storeSlug, (manager, storeFactory) => {
            manager.addStore(storeId, actualStore);
        });
    } else if (Array.isArray(globalThis.StorageManager.withStoreFactory)) {
        globalThis.StorageManager.withStoreFactory.push([storeSlug, (manager, storeFactory) => {
            manager.addStore(storeId, actualStore);
        }]);
    } else {
        globalThis.StorageManager.withStoreFactory = [storeSlug, (manager, storeFactory) => {
            manager.addStore(storeId, actualStore);
        }];
    }

    console.log("globalThis.StoreManager end", globalThis.StoreManager, globalThis.StorageManager.withStoreFactory);
</script>

<Fragment>
    {Astro.slots.render("default", [storeId])}
</Fragment>