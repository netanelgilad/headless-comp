---
import { addStore } from "./StoreManager";


const storeId = crypto.randomUUID();
const storeSlug = Astro.props.storeSlug;
const actualStore = Astro.props.storeFactory(Astro.props);
const initialState = actualStore.init ? await actualStore?.init() : {
    ...Astro.props,
};
addStore(storeId, actualStore);

---

<script is:inline define:vars={{
    storeId,
    storeSlug,
    initialState,
}}>
    globalThis.StoreManager = globalThis.StoreManager ?? {};

    const hydrateStore = (manager, storeFactory) => {
        const actualStore = storeFactory(initialState);
        manager.addStore(storeId, actualStore);
    };

    if (typeof globalThis.StoreManager.withStoreFactory === "function") {
        globalThis.StoreManager.withStoreFactory(storeSlug, hydrateStore);
    } else if (Array.isArray(globalThis.StoreManager.withStoreFactory)) {
        globalThis.StoreManager.whenStoreFactoryReady.push([storeSlug, hydrateStore]);
    } else {
        globalThis.StoreManager.whenStoreFactoryReady = [[storeSlug, hydrateStore]];
    }

</script>
<script>
    function capitalize(str: string) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }

    if (Array.isArray(globalThis.StoreManager.whenStoreFactoryReady)) {
        globalThis.StoreManager.whenStoreFactoryReady.forEach(([storeSlug]) => {
            // We'll have a convetion for the store location?
            import(`./ProductGallery/${capitalize(storeSlug)}Store.ts`);
        });
    }

</script>

<Fragment>
    {Astro.slots.render("default", [storeId])}
</Fragment>